Plan

Format of read data

{
    "station" : [  #numpy array
        (date_and_time, {
            "no" : no_value,
            "pm10" : pm10_value,
            "pm25" : pm25_value
        })
    ]
}

Reporting Module

daily_average(data, monitoring_station : str, pollutant : str) -> list (365 values)

Pseudocode:
Iterate over the list associated with the station.
Mean_daily_values = []

for i in 365:
    normal_values = []
    for j in 24:
        if value is a float  #use isinstance() to avoid an error for 'No Data'
            Add values to a list.  #index = i * 24 + j
    Call meanvalue(list)
    Add the return value to a list of mean_daily_values
return mean_daily_values

daily_median(data, monitoring_station : str, pollutant : str) -> list  (using an insertion sort)

Pseudocode:
Iterate over the list associated with the station.
median_daily_values = []
for i in 365:
    sorted_normal_values = []
    for j in 24:
        if value is a float:
            if j == 0:
                add value to list
            else:
                for index in range(len(sorted_normal_values))):
                    if value <= sorted_normal_values[index]:
                        sorted_normal_values.insert(index, value)
                        break
    median_daily_values.append(median_value(sorted_normal_values))
return median_daily_values

Insertion_sort()
for i in range(values):
    bool found_location = false
    int index_to_compare = i + 1
    while (not found_location and index_to_compare != len(values):
        if values[i] > values[index_to_compare]:
            temp = values[index_to_compare]
            values[index_to_compare] = values[i]
            values[i] = temp
            index_to_compare += 1
        else:
            found_location = true
    return values;


hourly_average(data, monitoring_station : str, pollutant : str) -> list

monthly_average(data, monitoring_station : str, pollutant : str) -> list


monthly_average_data = array of length 12

index = 0
for i in range 0 to 12:
    normal_monthly_data = list (as month length is not a fixed size)
    same_month = true
    current_month = empty string
    while same_month:
        current_month = data[::::]
        if len(data) != index + 1 && data[index + 1] != current_month:
            same_month = false
        normal_monthly_data.append(value)
        index++
    monthly_average_data.append(meanvalue(normal_monthly_data))





peak_hour_date(data, monitoring_station : str, pollutant : str) -> string (hour date)

count_missing_data(data, monitoring_station : str, pollutant : str) -> int

fill_missing_data(data, monitoring_station : str, pollutant : str) -> copy of data